grammar Simple;

@parser::header{
	import java.util.Map;
	import java.util.HashMap;
}

@parser::members{
	Map<String, Object> symbolTable = new HashMap<String, Object>();
}

program: PROGRAM ID BRACKET_OPEN 

	sentence*
	
BRACKET_CLOSE;

	sentence: var_decl | var_assign | println;

	var_decl: VAR ID SEMICOLON
			{symbolTable.put($ID.text, 0);};
	
	var_assign: ID ASSIGN expression SEMICOLON
	
			{symbolTable.put($ID.text, $expression.value);};
	
	println: PRINTLN expression SEMICOLON
	
			{System.out.println($expression.value);};
			
	expression returns [Object value]: 
	
			NUMBER {$value = Integer.parseInt ($NUMBER.text); }
			| 
			ID { $value = symbolTable.get ($ID.text) ; };

//DEFINIMOS TOKENS PARA PALABRAS RESERVADAS//

	PROGRAM: 'program';
	VAR: 'var';
	PRINTLN: 'println';
	
//DEFINIMOS TOKENS PARA OPERADORES ARITMETICOS,LOGIOS Y DE COMPARACION//

	PLUS: '+'; MINUS: '-';
	
	MULT: '*'; DIV: '/';
	
//DEFINIMOS OPERADORES LOGICOS (USANDO LA MISMA SINTAXIS QUE Java)
	
	AND: '&&'; 
	OR: '||'; 
	NOT: '!';
	
//DEFINIMOS OPERADORES DE COMPARACION

	GT: '>';
	LT: '<';
	
	GEQ: '>=';
	LEQ: '<=';
	
	EQ:'==';
	NEQ:'!=';
	
//ASIGMANOS LAS VARIABLES
	
	ASSIGN: '=';
	
//PARA PODER ASIGNAR PARENTESIS Y SIGNOS D EPUNTUACION

	BRACKET_OPEN:'{'; 
	BRACKET_CLOSE:'}';
	
	PAR_OPEN:'('; 
	PAR_CLOSE:')';
	
	SEMICOLON:';';
	
 /*TODOS ESTOS TOKENS SON MUY ESPECIFICOS,YA QUE SOLO IDENTIFICAN 1 CADENA  
  DE CARACTERES. A DIFERENCIA DE LOS SIGUIENTES, QUE SI SON CAPACES DE  
  IDENTIFICAR UNA SERIE DE STRINGS ENTRE SI */
	
	
	ID: [a-zA-Z] [a-zA-Z8-9_]*;
	
	NUMBER:[0-9]+;
	
	WS: [ \t\n\r]+ -> skip; //COMANDO DE ANTLR
	
	
/*PARA ESTE PUNTO,NUESTRO IDENTIFICADOR AUN NO ES CAPAZ DE DIFERENCIAR SI 
 LOS TOKENS INGRESADOS VIENEN EN EL ORDEN CORRECTO,EL LEXER SE LIMITA 
 SOLO A IDENTIFICARLOS,PERO NO VERIFICA QUE ESTEN ESCRITOS EN EL ORDEN 
 QUE CORRESPONDE A LAS REGLAS DE SINTAXIS */

//ESA LABOR LE CORRESPONDE AL ANALIZADOR SINTACTICO (PARSER)


